name: test-and-push-to-ecr-if-production-branch
on:
  push:
jobs:
  django-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        # 実行するPythonバージョン
        python-version: [3.8]

    # 実行する処理
    steps:
      # コードのチェックアウト
      - uses: actions/checkout@v2
        # Python環境のセットアップ
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: インストール
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: テスト実行
        run: |
          python manage.py test
        
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8

  build-and-push:
    name: BuildとPush
    runs-on: ubuntu-18.04
    # masterブランチの時のみ
    if: github.ref == 'refs/heads/master'
    needs: [django-test]

    steps:
      - uses: actions/checkout@master
      - name: AWS CLIを設定する。
        uses: actions/setup-python@v1
        with:
          version: "3.7"
          architecture: "x64"
      - name: Install awscli
        run: pip install --upgrade pip awscli

      - name: ECRにログインする
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: $(aws ecr get-login --no-include-email --region ap-northeast-1)

      - name: DockerイメージをBuildする
        env:
          CONTAINER_REGISTRY_PATH: ${{ secrets.CONTAINER_REGISTRY_PATH }}
          IMAGE_NAME: githubactions
        run: |
          docker build -t ${CONTAINER_REGISTRY_PATH}/${IMAGE_NAME}:latest .

      - name: SlackにPushをはじめることを通知する
        run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"${GITHUB_REPOSITORY}"'\n【START】Push Image to ECR!!"}' ${{ secrets.SLACK_WEBHOOK }}

      - name: ECRにPushする
        id: build-image
        env:
          CONTAINER_REGISTRY_PATH: ${{ secrets.CONTAINER_REGISTRY_PATH }}
          IMAGE_NAME: githubactions
        run: |
          docker push ${CONTAINER_REGISTRY_PATH}/${IMAGE_NAME}:latest
          echo "::set-output name=image::$CONTAINER_REGISTRY_PATH/$IMAGE_NAME:latest"

      - name: Pushの成功を通知する
        run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"${GITHUB_REPOSITORY}"'\n【FINISH】Pushed Image to ECR!!"}' ${{ secrets.SLACK_WEBHOOK }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: githubactions
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: spot-ecs
          cluster: spot-ecs
          wait-for-service-stability: true
